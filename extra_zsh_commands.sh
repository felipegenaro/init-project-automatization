#!/bin/bash

function initProject() {
    cd
    mkdir -p Documents
    cd Documents
    mkdir -p Projects
    cd Projects
    
    declare -r gitignore_c=".gitignore\n.vs\n.DS_Store\n### C ###\n# Prerequisites\n*.d\n# Object files\n*.o\n*.ko\n*.obj\n*.elf\n# Linker output\n*.ilk\n*.map\n*.exp\n# Precompiled Headers\n*.gch\n*.pch\n# Libraries\n*.lib\n*.a\n*.la\n*.lo\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n# Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n# Debug files\n*.dSYM/\n*.su\n*.idb\n*.pdb\n# Kernel Module Compile Results\n*.mod*\n*.cmd\n.tmp_versions/\nmodules.order\nModule.symvers\nMkfile.old\ndkms.conf"
    declare -r gitignore_js=".gitignore\n.vs\n.DS_Store\n### Node ###\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n# nyc test coverage\n.nyc_output\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n# Bower dependency directory (https://bower.io/)\nbower_components\n# node-waf configuration\n.lock-wscript\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n# Dependency directories\nnode_modules/\njspm_packages/\n# TypeScript v1 declaration files\ntypings/\n# TypeScript cache\n*.tsbuildinfo\n# Optional npm cache directory\n.npm\n# Optional eslint cache\n.eslintcache\n# Optional REPL history\n.node_repl_history\n# Output of 'npm pack'\n*.tgz\n# Yarn Integrity file\n.yarn-integrity\n# dotenv environment variables file\n.env\n.env.test\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n# next.js build output\n.next\n# nuxt.js build output\n.nuxt\n# rollup.js default build output\ndist/\n# Uncomment the public line if your project uses Gatsby\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# https://create-react-app.dev/docs/using-the-public-folder/#docsNav\n# public\n# Storybook build outputs\n.out\n.storybook-out\n# vuepress build output\n.vuepress/dist\n# Serverless directories\n.serverless/\n# FuseBox cache\n.fusebox/\n# DynamoDB Local files\n.dynamodb/\n# Temporary folders\ntmp/\ntemp/"
    declare -r gitignore_cpp=".gitignore\n.vs\n.DS_Store\n### C++ ###\n# Prerequisites\n*.d\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n# Precompiled Headers\n*.gch\n*.pch\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n# Fortran module files\n*.mod\n*.smod\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n# Executables\n*.exe\n*.out\n*.app"
    declare -r gitignore_py=".gitignore\n.vs\n.DS_Store\n.env\nenv/\n.venv\nvenv/\n### Python ###\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n# C extensions\n*.so\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n# Translations\n*.mo\n*.pot\n# Scrapy stuff:\n.scrapy\n# Sphinx documentation\ndocs/_build/\n# PyBuilder\ntarget/\n# pyenv\n.python-version\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n# celery beat schedule file\ncelerybeat-schedule\n# SageMath parsed files\n*.sage.py\n# Spyder project settings\n.spyderproject\n.spyproject\n# Rope project settings\n.ropeproject\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n# mkdocs documentation\n/site\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n# Pyre type checker\n.pyre/"
    declare -r gitignore_ruby=".gitignore\n.vs\n.DS_Store\n### Ruby ###\n*.gem\n*.rbc\n/.config\n/coverage/\n/InstalledFiles\n/pkg/\n/spec/reports/\n/spec/examples.txt\n/test/tmp/\n/test/version_tmp/\n/tmp/\n# Used by dotenv library to load environment variables.\n# .env\n# Ignore Byebug command history file.\n.byebug_history\n## Specific to RubyMotion:\n.dat*\n.repl_history\nbuild/\n*.bridgesupport\nbuild-iPhoneOS/\nbuild-iPhoneSimulator/\n## Specific to RubyMotion (use of CocoaPods):\n#\n# We recommend against adding the Pods directory to your .gitignore. However\n# you should judge for yourself, the pros and cons are mentioned at:\n# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control\n# vendor/Pods/\n## Documentation cache and generated files:\n/.yardoc/\n/_yardoc/\n/doc/\n/rdoc/\n## Environment normalization:\n/.bundle/\n/vendor/bundle\n/lib/bundler/man/\n# for a library or gem, you might want to ignore these files since the code is\n# intended to run in multiple environments; otherwise, check them in:\n# Gemfile.lock\n# .ruby-version\n# .ruby-gemset\n# unless supporting rvm < 1.11.0 or doing something fancy, ignore this:\n.rvmrc\n### Ruby Patch ###\n# Used by RuboCop. Remote config files pulled in from inherit_from directive.\n# .rubocop-https?--*"

    case $1 in
    js) 
        mkdir -p javascript
        cd javascript
        mkdir -p $2
        cd $2 
        touch .gitignore
        touch README.md
        echo $gitignore_js > .gitignore
        yarn init -yp;;
    c)
        mkdir -p C
        cd C
        mkdir -p $2
        cd $2 
        touch .gitignore
        touch README.md
        echo $gitignore_c > .gitignore;;
    cpp)
        mkdir -p Cpp
        cd Cpp
        mkdir -p $2
        cd $2 
        touch .gitignore
        touch README.md
        echo $gitignore_cpp > .gitignore;;
    py)
        mkdir -p python
        cd python
        mkdir -p $2
        cd $2 
        touch .gitignore
        touch README.md
        python -m venv  .env
        echo $gitignore_py > .gitignore
        source .env/bin/activate;;
    ruby)
        mkdir -p ruby
        cd ruby
        mkdir -p $2
        cd $2 
        touch .gitignore
        touch README.md
        echo $gitignore_ruby > .gitignore;;
    *) echo "invalid option"
    esac

    if [ $3 = "git" ]; then
        python3 ~/init_repository.py $2
        git init
        git remote add origin git@github.com:<username>/$2.git
        # git remote add origin https://github.com/<username>/$2.git
        git add .
        git commit -m "initial commit"
        git push -u origin master
    fi

    code .
}

# source ~/.extra_zsh_commands